// Code generated by MockGen. DO NOT EDIT.
// Source: service/service_user/service.go
//
// Generated by this command:
//
//	mockgen -source=service/service_user/service.go -destination=service/service_user/service.mock.gen.go -package=service_user
//

// Package service_user is a generated GoMock package.
package service_user

import (
	message "go-echo/helper/message"
	request "go-echo/model/request"
	response "go-echo/model/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserService) Login(req request.LoginRequest) (*response.LoginResponse, message.Message, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(*response.LoginResponse)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(any)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), req)
}
