// Code generated by MockGen. DO NOT EDIT.
// Source: service/service_driver/service.go
//
// Generated by this command:
//
//	mockgen -source=service/service_driver/service.go -destination=service/service_driver/service.mock.gen.go -package=service_driver
//

// Package service_driver is a generated GoMock package.
package service_driver

import (
	message "go-echo/helper/message"
	base "go-echo/model/base"
	request "go-echo/model/request"
	response "go-echo/model/response"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDriverService is a mock of DriverService interface.
type MockDriverService struct {
	ctrl     *gomock.Controller
	recorder *MockDriverServiceMockRecorder
}

// MockDriverServiceMockRecorder is the mock recorder for MockDriverService.
type MockDriverServiceMockRecorder struct {
	mock *MockDriverService
}

// NewMockDriverService creates a new mock instance.
func NewMockDriverService(ctrl *gomock.Controller) *MockDriverService {
	mock := &MockDriverService{ctrl: ctrl}
	mock.recorder = &MockDriverServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverService) EXPECT() *MockDriverServiceMockRecorder {
	return m.recorder
}

// DeleteDriverByNumber mocks base method.
func (m *MockDriverService) DeleteDriverByNumber(req request.DeleteDriverByNumber) (*response.DeleteDriverByNumberResponse, message.Message, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriverByNumber", req)
	ret0, _ := ret[0].(*response.DeleteDriverByNumberResponse)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(map[string]string)
	return ret0, ret1, ret2
}

// DeleteDriverByNumber indicates an expected call of DeleteDriverByNumber.
func (mr *MockDriverServiceMockRecorder) DeleteDriverByNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriverByNumber", reflect.TypeOf((*MockDriverService)(nil).DeleteDriverByNumber), req)
}

// GetDriverByNumber mocks base method.
func (m *MockDriverService) GetDriverByNumber(req request.GetDriverByNumber) (*response.GetDriverByNumberResponse, message.Message, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByNumber", req)
	ret0, _ := ret[0].(*response.GetDriverByNumberResponse)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(map[string]string)
	return ret0, ret1, ret2
}

// GetDriverByNumber indicates an expected call of GetDriverByNumber.
func (mr *MockDriverServiceMockRecorder) GetDriverByNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByNumber", reflect.TypeOf((*MockDriverService)(nil).GetDriverByNumber), req)
}

// GetListDrivers mocks base method.
func (m *MockDriverService) GetListDrivers(req request.GetListDriversRequest) ([]response.InsertDriverResponse, *base.Pagination, message.Message, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDrivers", req)
	ret0, _ := ret[0].([]response.InsertDriverResponse)
	ret1, _ := ret[1].(*base.Pagination)
	ret2, _ := ret[2].(message.Message)
	ret3, _ := ret[3].(map[string]string)
	return ret0, ret1, ret2, ret3
}

// GetListDrivers indicates an expected call of GetListDrivers.
func (mr *MockDriverServiceMockRecorder) GetListDrivers(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDrivers", reflect.TypeOf((*MockDriverService)(nil).GetListDrivers), req)
}

// InsertDriver mocks base method.
func (m *MockDriverService) InsertDriver(req request.InsertDriverRequest) (*response.InsertDriverResponse, message.Message, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDriver", req)
	ret0, _ := ret[0].(*response.InsertDriverResponse)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(map[string]string)
	return ret0, ret1, ret2
}

// InsertDriver indicates an expected call of InsertDriver.
func (mr *MockDriverServiceMockRecorder) InsertDriver(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDriver", reflect.TypeOf((*MockDriverService)(nil).InsertDriver), req)
}

// UpdateDriverByNumber mocks base method.
func (m *MockDriverService) UpdateDriverByNumber(req request.UpdateDriverByNumber) (*response.UpdateDriverByNumberResponse, message.Message, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriverByNumber", req)
	ret0, _ := ret[0].(*response.UpdateDriverByNumberResponse)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(map[string]string)
	return ret0, ret1, ret2
}

// UpdateDriverByNumber indicates an expected call of UpdateDriverByNumber.
func (mr *MockDriverServiceMockRecorder) UpdateDriverByNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDriverByNumber", reflect.TypeOf((*MockDriverService)(nil).UpdateDriverByNumber), req)
}
